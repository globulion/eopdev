#!/usr/bin/python
sys.path.insert(0, './..')
import oepdev
import numpy

# test molecule
molecule h2o2 {
0 1
O          0.96944       -4.30612       -2.18132
H          1.33485       -5.15965       -1.90564
H          0.84646       -3.85901       -1.31466
--
0 1
O          0.67961       -3.28639        0.35954
H          1.28440       -2.98969        1.06083
H         -0.15242       -2.83702        0.58835

units angstrom
symmetry c1
noreorient
nocom
}

set {
    # ==> General Psi4 Options <== #
    basis                         aug-cc-pVDZ
    df_basis_scf                  aug-cc-pVDZ-jkfit
    guess                         core
    e_convergence                 1e-11
    d_convergence                 1e-10
    print                         1
    puream                        False
}


# run psi4
en, wfn = energy('hf', molecule=h2o2, return_wfn=True)

# use Python interface
print(" CAMM Charges computed by using OEPDev from Python!")

# create deep copy of wfn
#wfn_c = wfn.c1_deep_copy(wfn.basisset())

# compute CAMM - method 1
camm1 = oepdev.DMTPole.build("CAMM", wfn, 1)
camm1.compute()

# compute CAMM - method 2
camm2 = oepdev.get_camm(wfn)

# grab Mulliken charges
charges1 = camm1.charges(0)
charges2 = camm2.charges(0).clone()
charges1.print_out() # print to the output file

# check if charges grabed are references to camm object attribute charges[0]_ or not
c1 = numpy.array(camm1.charges(0))
charges1.set(0, 0, charges1.get(0, 0) + 100.0) # modify
c2 = numpy.array(camm1.charges(0))
print(" Change in charges without making a copy = %9.3f" % (c1-c2).sum())

c1 = numpy.array(camm2.charges(0))
charges2.set(0, 0, 100.0)
c2 = numpy.array(camm2.charges(0))
print(" Change in charges after   making a copy = %9.3f" % (c1-c2).sum())


# recenter camm2 to global origin (to make AAMM's) ---> bug in recentering - not working yet
#camm2.recenter(psi4.core.Matrix("Origin of Coordinate system", camm2.n_sites(),3))
# ... and re-recenter them back to atomic sites (to go back to CAMM's)
#camm2.recenter(camm2.centres())


# move first CAMM set by a vector
t = psi4.core.Vector("Translation Vector", 3)
t.set(0, 10.0) # in Bohrs
t.print_out()
camm1.translate(t)

# compute interaction energy between CAMM 2 and CAMM 1 (after translation)
m = camm2.energy(camm1, oepdev.MultipoleConvergence.ConvergenceLevel.R5)
l1 = m.level(oepdev.MultipoleConvergence.ConvergenceLevel.R1).get(0) 
l2 = m.level(oepdev.MultipoleConvergence.ConvergenceLevel.R2).get(0)
l3 = m.level(oepdev.MultipoleConvergence.ConvergenceLevel.R3).get(0)
l4 = m.level(oepdev.MultipoleConvergence.ConvergenceLevel.R4).get(0)
l5 = m.level(oepdev.MultipoleConvergence.ConvergenceLevel.R5).get(0)

log="""
 Interaction Energy Convergence:
 -------------------------------
   - R1 = %10.6f [a.u.]
   - R2 = %10.6f [a.u.]
   - R3 = %10.6f [a.u.]
   - R4 = %10.6f [a.u.]
   - R5 = %10.6f [a.u.]
""" %(l1, l2, l3, l4, l5)
print(log)
