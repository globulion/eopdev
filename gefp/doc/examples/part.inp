#!/usr/bin/python3
sys.path.insert(0, './../../../..')
import oepdev
import gefp

# test molecule
molecule h2o {
0 1
O          0.96944       -4.30612       -2.18132
H          1.33485       -5.15965       -1.90564
H          0.84646       -3.85901       -1.31466
--
0 1
O          0.67961       -3.28639        0.35954
H          1.28440       -2.98969        1.06083
H         -0.15242       -2.83702        0.58835

units angstrom
symmetry c1
noreorient
nocom
}

set 
{
    # ==> General Psi4 Options <== #
    basis                         6-31G*
    scf_type                      df
    guess                         core
    e_convergence                 1e-11
    d_convergence                 1e-10
    print                         1
    puream                        False
    freeze_core                   False
    onepdm                        False
    opdm_relax                    False
    cc_type                       df
    df_basis_scf                  aug-cc-pvdz-jkfit
    df_basis_cc                   aug-cc-pvdz-ri
    df_basis_sapt                 aug-cc-pvdz-ri
    # ==> OepDev Options <== #
    oepdev_target                 solver
    oepdev_solver_type            repulsion_energy
    oepdev_localize               True
    oepdev_df_type                double
    df_basis_oep                  6-311G
    df_basis_int                  aug-cc-pVDZ-jkfit
   #df_basis_int                  6-31G*
    dmtp_conver                   R1
    esp_npoints_per_atom          4000
    esp_pad_sphere                5.0
    esp_vdw_radius_h              3.0
    esp_vdw_radius_o              4.6
}

# create density decomposition solver
solver = gefp.density.partitioning.DensityDecomposition(h2o, method='cc2', ACBS=True, no_cutoff=0.00001)

# compute unperturbed monomer wavefunctions
solver.compute()

# grab some data
nmo = solver.data["nmo"]

# compute one-electron Pauli deformation density
dD = solver.deformation_density('pauli')

# compute natural orbitals for second isolated wavefunction
wfn = solver.data["wfn"][1]
occ, orb = solver.natural_orbitals(wfn.Da(), orthogonalize_first=wfn.S(), order='descending')

# print the natural occupation numbers
print(" Natural Occupation Numbers of monomer 2")
for i, o in enumerate(occ):
    print(" %3d %13.6f" % (i+1, o))


# print the solver information on screen and to the output file
print(solver)
solver.print_out()

# run SAPT
energy('sapt0', molecule=h2o)

# run oepdev (now only HF is supported)
energy('oepdev', molecule=h2o)
