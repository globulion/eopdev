#!/usr/bin/python3
sys.path.insert(0, './../../../../..')
import oepdev
import gefp
import numpy

memory 2 gb

def analyze_population_dimer(title, d, s, n, out_name='x.dat'):
    "Analyze density matrices for dimer case"
    print(" %s" % title)
    out = open(out_name,'w')
    d_d1 = d[:n,:n]
    d_d2 = d[n:,n:]
    d_o1 = d[:n,n:]
    d_o2 = d[n:,:n]
    
    ds = numpy.dot(d, s)
    
    d_aa = d[:n, :n] ; s_aa = s[:n, :n]
    d_bb = d[n:, n:] ; s_bb = s[n:, n:]
    d_ab = d[:n, n:] ; s_ab = s[:n, n:]
    d_ba = d[n:, :n] ; s_ba = s[n:, :n]
    
    n_tot = 2.0 * ds.trace()
    n_aa  = 2.0 * numpy.dot(d_aa, s_aa).trace()
    n_bb  = 2.0 * numpy.dot(d_bb, s_bb).trace()
    n_ab  = 2.0 * numpy.dot(d_ab, s_ba).trace()
    n_ba  = 2.0 * numpy.dot(d_ba, s_ab).trace()
    diff = n_tot - (n_aa + n_bb + n_ab + n_ba)
    
    print("Sum of N   : %16.8f %16.8f" % (n_tot, diff))
    print("Sum of N_AA: %16.8f       Diagonal: %16.8f" % (n_aa,d_d1.sum()))
    print("Sum of N_BB: %16.8f       Diagonal: %16.8f" % (n_bb,d_d2.sum()))
    print("Sum of N_AB: %16.8f       Offdiagl: %16.8f" % (n_ab,d_o1.sum()))
    print("Sum of N_BA: %16.8f                       " %  n_ba)
    print("\n")
    
   #print("Offdiagl: %16.8f" % (d_o2).sum())
    log = ''
    for i in range(len(d)):
        log += len(d) * "%16.6E" % tuple(d[i])
        log += "\n"
    out.write(log)
    out.close()
    return


# test molecule
molecule h2o {
0 1
O           -1.520415065435    -0.297208898086    -0.154341702802
H           -0.606858357152    -0.106286757673    -0.012562756363
H           -1.944874287557    -0.186465329588     0.676278031160
--
0 1
O            1.445733494634     0.280985121731     0.141407965533
H            1.992265825294    -0.452886932844    -0.076333239509
H            1.744717543106     1.003122124163    -0.382114239048

units angstrom
symmetry c1
noreorient
nocom
}

# test molecule
molecule h2 {
0 1
H         -5.84292        0.29331        0.00000
H         -5.52520       -0.66330        0.00000
--
0 1
H         -2.73324        0.26399        0.00000
H         -3.05097        1.22060        0.00000

units angstrom
symmetry c1
noreorient
nocom
}


# test molecule
molecule hf {
0 1
F         -7.11427        2.74635        0.00000
H         -6.10463        2.77727        0.00000
--
0 1
F         -3.77762        2.86279        0.00000
H         -2.76797        2.89462        0.00000

units angstrom
symmetry c1
noreorient
nocom
}


# test molecule
molecule me {
0 1
C         -7.02992        3.65594        0.22556
H         -5.98849        3.98031        0.16970
H         -7.21530        2.89474       -0.53543
H         -7.68733        4.51090        0.05323
H         -7.22804        3.23737        1.21470
--
0 1
C         -4.35996        0.91074       -0.25134
H         -3.30629        0.63085       -0.31672
H         -4.55189        1.38327        0.71446
H         -4.98094        0.01765       -0.34935
H         -4.60088        1.61136       -1.05382

units angstrom
symmetry c1
noreorient
nocom
}

# test molecule
molecule me2 {
0 1
C         -6.71277        2.35606        0.37834
H         -5.65882        2.50761        0.06682
H         -6.90736        1.27180        0.50961
H         -7.39068        2.76178       -0.40050
H         -6.89434        2.88311        1.33756
--
0 1
C         -0.69759        1.22550        0.00005
H          0.41183        1.22617        0.00009
H         -1.06805        2.25047        0.20729
H         -1.06697        0.53316        0.78426
H         -1.06712        0.89214       -0.99146

units angstrom
symmetry c1
noreorient
nocom
}


# test molecule
molecule am {
0 1
N         -6.47608        2.07266        0.00988
H         -5.47162        1.83208        0.02313
H         -6.88265        1.47990        0.73166
H         -6.80982        1.69494       -0.87534
--
0 1
N         -3.54010        1.31180        0.03555
H         -2.96898        0.47569       -0.09429
H         -3.19722        1.98205       -0.65552
H         -3.25574        1.69457        0.93931

units angstrom
symmetry c1
noreorient
nocom
}

# test molecule
molecule xu {
0 1
C         -4.80121        1.71512        0.05966
O         -3.38148        1.71777       -0.08239
H         -5.25373        2.30010       -0.74543
H         -5.07670        2.15385        1.02234
H         -5.17420        0.68860        0.01209
H         -3.07289        2.64376       -0.04454
--
0 1
N         -2.82839        4.91509       -0.06628
H         -1.87525        4.95817        0.28950
H         -2.78991        5.16873       -1.05169
H         -3.35666        5.64449        0.40890

units angstrom
symmetry c1
noreorient
nocom
}


set 
{
    # ==> General Psi4 Options <== #
    basis                         6-311++G(2d,2p)
    #basis                         6-311G**
    #basis                      6-31G*
    scf_type                      df
    guess                         core
    e_convergence                 1e-11
    d_convergence                 1e-10
    print                         1
    puream                        False
    freeze_core                   False
    tpdm                          True
    onepdm                        False
    opdm_relax                    True
    cc_type                       df
    df_basis_scf                  aug-cc-pvdz-jkfit
    df_basis_cc                   aug-cc-pvdz-ri
    df_basis_sapt                 aug-cc-pvdz-ri
    # 
    perturb_h                     True
    perturb_with                  dipole
    perturb_dipole                [ 0.00, 0.00, -0.00]
    # ==> OepDev Options <== #
    oepdev_target                 solver
    oepdev_solver_type            repulsion_energy
    oepdev_localize               True
    oepdev_df_type                double
    df_basis_oep                  6-311G
    df_basis_int                  aug-cc-pVDZ-jkfit
   #df_basis_int                  6-31G*
    dmtp_conver                   R1
    esp_npoints_per_atom          4000
    esp_pad_sphere                5.0
    esp_vdw_radius_h              3.0
    esp_vdw_radius_o              4.6
}

# create density decomposition solver
solver = gefp.density.partitioning.DensityDecomposition(h2o, method='hf', acbs=True, no_cutoff=0.00000, xc_scale=1.0, l_dds=False, taylor=False, verbose=False, erase_dpol_offdiag=False)

# compute unperturbed monomer wavefunctions
solver.compute(polar_approx=True)

# print the solver information on screen and to the output file
print(solver)
solver.print_out()

# save polarization density
d_fqm = solver.deformation_density('fqm')
d_pau = solver.deformation_density('pau')
d_pol = solver.deformation_density('pol')
D0_fqm = numpy.array(solver.matrix["d"])
D_fqm  = numpy.array(solver.matrix["dqm"])
s      = numpy.array(solver.matrix["sqm"])
n = int(s.shape[0]/2)

analyze_population_dimer("UNPERTURBED DENSITY", D0_fqm,s, n, 'd.oqm.dat')
analyze_population_dimer("EXACT DENSITY      ", D_fqm, s, n, 'd.dqm.dat')
analyze_population_dimer("DELTA EXACT        ", d_fqm, s, n, 'd.fqm.dat')
analyze_population_dimer("DELTA PAULI PRNCPL ", d_pau, s, n, 'd.pau.dat')
analyze_population_dimer("DELTA POLARIZATION ", d_pol, s, n, 'd.pol.dat')

# run SAPT
#energy('sapt0', molecule=h2o)
